#Test local django server:-
---------------------------
$ http://localhost:8009/ still works.(test djagno server)

#Build the new image and spin up the two containers:-
---------------------------------------------------
$ docker-compose up -d --build

Run the migrations:-
------------------
$ docker-compose exec movies python manage.py migrate --noinput

#To remove the volumes along with the containers:-
-------------------------------------------------
$ docker-compose down -v 

#To list containers:-
--------------------
$ docker ps

#To see docker logs:-
---------------------
$ docker-compose logs -f

#To login to postgres DB container:-
------------------------------------
$ docker-compose exec movies-db psql --username=movies --dbname=movies_dev

#To check that the  database volume was created as by running:-
---------------------------------------------------------------
$ docker volume inspect django-tdd-docker_postgres_data

#Update the file permissions locally:-
--------------------------------------
$ chmod +x app/entrypoint.sh
for windows system
c:/> ICACLS app/entrypoint.sh

#To build and run container:-
-----------------------------
$ docker-compose up -d --build


#Pytest Commands :- 
#let's review some useful pytest commands:
----------------------------------------
# normal run
$ docker-compose exec movies pytest

# disable warnings
$ docker-compose exec movies pytest -p no:warnings

# run only the last failed tests
$ docker-compose exec movies pytest --lf

# run only the tests with names that match the string expression
$ docker-compose exec movies pytest -k "movie and not all_movies"

# stop the test session after the first failure
$ docker-compose exec movies pytest -x

# enter PDB after first failure then end the test session
$ docker-compose exec movies pytest -x --pdb

# stop the test run after two failures
$ docker-compose exec movies pytest --maxfail=2

# show local variables in tracebacks
$ docker-compose exec movies pytest -l

# list the 2 slowest tests
--------------------------
$ docker-compose exec movies pytest --durations=2

$ docker-compose exec movies pytest
$ docker-compose exec movies pytest -k models

# API testing(I am using postman do that):-
------------------------------------------
$ http --json POST http://localhost:8009/api/movies/ title=Fargo genre=comedy year=1996 
$ http --json http://localhost:8009/api/movies/

# To seed the database with some initial data, run:-
--------------------------------------------------
$ docker-compose exec movies python manage.py flush
$ docker-compose exec movies python manage.py loaddata movies.json